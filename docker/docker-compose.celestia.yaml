version: '3'

services:
  validator:
    container_name: sov-celestia-validator
    image: ghcr.io/celestiaorg/celestia-app:v0.13.2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:26657/block?height=1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - VALIDATOR_NAME=validator
      - KEY_NAME_1=validator
      - KEY_NAME_2=node1
      - KEY_NAME_3=node2
      - CHAIN_ID=test
#      - CHAIN_ID=sov-testnet
      - CELES_AMOUNT=12300000000000000000000000utia
      - STAKING_AMOUNT=1000000000utia
      - DEBIAN_FRONTEND=noninteractive
    ports:
      - "9090:9090"
      - "36656:26656"
      - "36657:26657"
      - "36658:26658"
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk update -qq && apk add -qq curl && \
        /bin/celestia-appd init $$VALIDATOR_NAME --chain-id $$CHAIN_ID && \
        if [ ! -f "/root/keyring-test/$$KEY_NAME_1.info" ]; then \
          echo "CREATING NEW KEYS" && \
          /bin/celestia-appd keys add $$KEY_NAME_1 --keyring-backend test && \
          /bin/celestia-appd keys add $$KEY_NAME_2 --keyring-backend test && \
          /bin/celestia-appd keys add $$KEY_NAME_3 --keyring-backend test && \
          mkdir -p /root/keyring-test && cp /root/.celestia-app/keyring-test/* /root/keyring-test/; \
        else \
          echo "USING EXISTING KEYS" && \
          mkdir -p /root/.celestia-app/keyring-test/ && \
          cp /root/keyring-test/* /root/.celestia-app/keyring-test/; \
        fi; \
        echo "AVAILABLE KEYS:" && \
        /bin/celestia-appd keys list --keyring-backend test && \
        /bin/celestia-appd add-genesis-account $$KEY_NAME_1 $$CELES_AMOUNT --keyring-backend test && \
        /bin/celestia-appd add-genesis-account $$KEY_NAME_2 $$CELES_AMOUNT --keyring-backend test && \
        /bin/celestia-appd add-genesis-account $$KEY_NAME_3 $$CELES_AMOUNT --keyring-backend test && \
        /bin/celestia-appd gentx $$KEY_NAME_1 $$STAKING_AMOUNT --chain-id $$CHAIN_ID --keyring-backend test --evm-address 0x966e6f22781EF6a6A82BBB4DB3df8E225DfD9488 && \
        /bin/celestia-appd collect-gentxs && \
        echo "NODE_ID:" && \
        /bin/celestia-appd tendermint show-node-id && \

        /bin/celestia-appd start --rpc.laddr tcp://0.0.0.0:26657 --proxy_app tcp://0.0.0.0:26658
    volumes:
      - ./keyring-test:/root/keyring-test/


  #        cat /root/.celestia-app/config/genesis.json && \

  bridge:
    image: ghcr.io/celestiaorg/celestia-node:v0.7.1
    container_name: sov-celestia-bridge
    environment:
      - KEY_NAME=validator
      - CHAIN_ID=test
      - STAKING_AMOUNT=1000000000utia
      - DEBIAN_FRONTEND=noninteractive
    depends_on:
      - validator
    ports:
      - "26656:26656"
      - "26657:26657"
      - "26658:26658"
    entrypoint:
      - /bin/sh
      - -c
      - |
        apt-get -qq update -qq && apt -qq install -y curl jq && rm -rf /var/lib/apt/lists/* && \
        sleep 20 && \
        until curl http://validator:26657/block?height=1; do echo "Waiting for validator..."; sleep 5; done && \
        mkdir -p /bridge/keys/keyring-test/ && cp -r /root/keyring-test/* /bridge/keys/keyring-test/ && \
        /celestia bridge init --node.store /bridge && \
        until curl http://validator:26657/block?height=1; do echo "Waiting for validator..."; sleep 5; done && \
        export GENESIS=$(curl http://validator:26657/block?height=1 | jq '.result.block_id.hash' | tr -d '"') && \
        export CELESTIA_CUSTOM="$$CHAIN_ID:$$GENESIS" && \
        echo "Starting bridge with option=$$CELESTIA_CUSTOM and key name $$KEY_NAME. API KEY:" && \
        /celestia bridge auth admin --node.store /bridge --log.level=ERROR && echo " " && \
        echo "$(/celestia bridge auth admin --node.store /bridge --log.level=ERROR)" > /root/keyring-test/bridge_1_key.txt && \
        /celestia bridge start --node.store /bridge --gateway --gateway.addr 0.0.0.0 --rpc.addr 0.0.0.0 --core.ip validator --keyring.accname $$KEY_NAME
    volumes:
      - ./keyring-test:/root/keyring-test

  bridge-2:
    image: ghcr.io/celestiaorg/celestia-node:v0.7.1
    container_name: sov-celestia-bridge-2
    environment:
      - KEY_NAME=node1
      - CHAIN_ID=test
      - STAKING_AMOUNT=1000000000utia
      - DEBIAN_FRONTEND=noninteractive
    depends_on:
      - validator
    ports:
      - "46656:26656"
      - "46657:26657"
      - "46658:26658"
    entrypoint:
      - /bin/sh
      - -c
      - |
        apt-get -qq update -qq && apt -qq install -y curl jq && rm -rf /var/lib/apt/lists/* && \
        sleep 20 && \
        until curl http://validator:26657/block?height=1; do echo "Waiting for validator..."; sleep 5; done && \
        mkdir -p /bridge/keys/keyring-test/ && cp -r /root/keyring-test/* /bridge/keys/keyring-test/ && \
        /celestia bridge init --node.store /bridge && \
        until curl http://validator:26657/block?height=1; do echo "Waiting for validator..."; sleep 5; done && \
        export GENESIS=$(curl http://validator:26657/block?height=1 | jq '.result.block_id.hash' | tr -d '"') && \
        export CELESTIA_CUSTOM="$$CHAIN_ID:$$GENESIS" && \
        echo "Starting bridge with option=$$CELESTIA_CUSTOM and key name $$KEY_NAME. API KEY:" && \
        /celestia bridge auth admin --node.store /bridge --log.level=ERROR && echo " " && \
        echo "$(/celestia bridge auth admin --node.store /bridge --log.level=ERROR)" > /root/keyring-test/bridge_2_key.txt && \
        /celestia bridge start --node.store /bridge --gateway --gateway.addr 0.0.0.0 --rpc.addr 0.0.0.0 --core.ip validator --keyring.accname $$KEY_NAME
    volumes:
      - ./keyring-test:/root/keyring-test



# TODO:
#  * +Create keys only if keyring-test does not exist
#  * ~Export validator API key to file. Leftovers - generate rollup_config.toml
#  * +Multiple bridges
#  * Bridge health-check
#  * Timeoutable wait for block_height
#  * Quite install script
#  * Print genesis.json




# GENESIS=""; CNT=0; MAX=30; while [ "${#GENESIS}" -le 4 -a $CNT -ne $MAX ]; do GENESIS=$(curl -s http://127.0.0.1:26657/block?height=1 | jq '.result.block_id.hash' | tr -d '"'); ((CNT++)); sleep 1; done
# GENESIS=""; CNT=0; MAX=30; while [ "${#GENESIS}" -le 4 -a $CNT -ne $MAX ]; do GENESIS=$(curl -s http://127.0.0.1:26657/block?height=1 | jq '.result.block_id.hash' | tr -d '"'); ((CNT++)); sleep 1; done && \